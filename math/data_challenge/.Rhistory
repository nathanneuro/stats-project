library(BEST)
?BEST
??BEST
library(BEST)
ratdata <- read.csv("~/Documents/Dropbox/Programming/ratdata.csv", row.names=1)
View(ratdata)
View(ratdata)
Second.CNO.6mg.kg, Third.CNO.6mg.kg)
print(drug)
ratdata$Second.CNO.6mg.kg, ratdata$Third.CNO.6mg.kg)
ratdata$Second.CNO.6mg.kg + ratdata$Third.CNO.6mg.kg)
ratdata$Second.CNO.6mg.kg + ratdata$Third.CNO.6mg.kg)
print(drug)
ratdata$Second.CNO.6mg.kg + ratdata$Third.CNO.6mg.kg
drug <- ratdata$First.CNO.6mg.kg,
drug <- ratdata$First.CNO.6mg.kg ,
drug <- ratdata$First.CNO.6mg.kg ;
ratdata$Second.CNO.6mg.kg + ratdata$Third.CNO.6mg.kg
print(drug)
help(c)
ratdata.df$drug <- c(ratdata$First.CNO.6mg.kg,
ratdata$Second.CNO.6mg.kg,
ratdata$Third.CNO.6mg.kg)
ratdata$Second.CNO.6mg.kg,
ratdata$Third.CNO.6mg.kg))
print(drug)
ratdata.df <- data.frame(drug = c(ratdata$First.CNO.6mg.kg,
ratdata$Second.CNO.6mg.kg,
ratdata$Third.CNO.6mg.kg))
print(drug)
View(ratdata.df)
help(drop.NA)
??drop NA
??drop
na.omit(ratdata.df)
ratdata.df$placebo <- c(ratdata$Vehicle1, ratdata$Vehicle2)
placebovec <- c(ratdata$Vehicle1, ratdata$Vehicle2)
print(placebovec)
na.omit(placebovec)
print(placebovec)
na.omit(placebovec)
print(placebovec)
help("na.omit")
drugvec = ratdata.df$drug
placebovec <- c(ratdata$Vehicle1, ratdata$Vehicle2)
print(placebovec)
na.omit(placebovec)
print(placebovec)
placebovec <- na.omit(placebovec)
print(placebovec)
BESTout <- BESTmcmc(drugvec, placebovec)
drugvec = na.omit(ratdata.df$drug)
placebovec <- c(ratdata$Vehicle1, ratdata$Vehicle2)
print(placebovec)
placebovec <- na.omit(placebovec)
BESTout <- BESTmcmc(drugvec, placebovec)
BESTout
summary(BESTout)
plot(BESTout)
plot(BESTout, "sd")
plotPostPred(BESTout)
hist(BESTout$nu)
va = c(15,12,10,13)
sd(va)
print((7^12 - 7^10)/(7^11 - 7^9))
vb = c(20, 35, 7, 12, 73, 12, 18, 31)
mean(vb)
# compute path
n <- 10000
rw <- matrix(0, ncol = 2, nrow = n)
# generate the indices to set the deltas
indx <- cbind(seq(n), sample(c(1, 2), n, TRUE))
# now set the values
rw[indx] <- sample(c(-1, 1), n, TRUE)
# cumsum the columns
rw[,1] <- cumsum(rw[, 1])
rw[, 2] <- cumsum(rw[, 2])
plot(0,type="n",xlab="x",ylab="y",main="Random Walk Simulation
In Two Dimensions",col=1:10,xlim=range(rw[,1]),ylim=range(rw[,2]))
# use 'segments' to color each path
segments(head(rw[, 1], -1)
, head(rw[, 2], -1)
, tail(rw[, 1], -1)
, tail(rw[, 2], -1)
, col = rainbow(nrow(rw) -1)  # a range of colors
)
end<-cbind(rw[10000,1],rw[10000,2])
start<-cbind(0,0)
points(start,pch=16,col="green", cex = 3)
points(end,pch=16,col="red", cex = 3)
# compute path
n <- 10000
rw <- matrix(0, ncol = 2, nrow = n)
# generate the indices to set the deltas
indx <- cbind(seq(n), sample(c(1, 2), n, TRUE))
# now set the values
rw[indx] <- sample(c(-1, 1), n, TRUE)
# cumsum the columns
rw[,1] <- cumsum(rw[, 1])
rw[, 2] <- cumsum(rw[, 2])
plot(0,type="n",xlab="x",ylab="y",main="Random Walk Simulation
In Two Dimensions",col=1:10,xlim=range(rw[,1]),ylim=range(rw[,2]))
# use 'segments' to color each path
segments(head(rw[, 1], -1)
, head(rw[, 2], -1)
, tail(rw[, 1], -1)
, tail(rw[, 2], -1)
, col = rainbow(nrow(rw) -1)  # a range of colors
)
end<-cbind(rw[10000,1],rw[10000,2])
start<-cbind(0,0)
points(start,pch=16,col="green", cex = 3)
points(end,pch=16,col="red", cex = 3)
`311_Service_Requests_from_2010_to_Present` <- read.csv("~/herokufolder/flask tutorial/flask-demo/data_challenge/311_Service_Requests_from_2010_to_Present.csv")
View(`311_Service_Requests_from_2010_to_Present`)
agency <- `311_Service_Requests_from_2010_to_Present`$Agency
summary(agency)
ftable(agency)
afreq <- ftable(agency)
print(afreq[2]/sum(afreq))
print(afreq)
prop.table(agency)
prop.table(afreq)
print(aprop$NYPD)
aprop = prop.table(afreq)
print(aprop$NYPD)
print(aprop[-4,])
print(aprop[,-4])
print(aprop[,4])
print(aprop[1,4])
print(aprop[2,4])
print(aprop[0,4])
print(aprop[0,])
aprop = sort(prop.table(afreq))
aprop
aprop = sort(-prop.table(afreq))
aprop
aprop[2]
print(aprop[2])
signif(aprop[2], 10)
options(digits=10)
signif(aprop[2], 10)
aprop[2]
aprop = sort(prop.table(afreq)-)
aprop = sort(prop.table(-afreq))
aprop[2]
aprop = -sort(prop.table(afreq))
aprop[2]
?sort
aprop = sort(prop.table(afreq), decreasing = T)
aprop[2]
type = data.frame(`311_Service_Requests_from_2010_to_Present`$Complaint.Type, `311_Service_Requests_from_2010_to_Present`$Borough)
summary(type)
install.packages(cptable)
install.packages("cptable")
install.packages("e1071")
library(e1071)
model <- naiveBayes(type$X.311_Service_Requests_from_2010_to_Present..Complaint.Type ~ ., data = type)
predict(model, type[1:2,])
predict(model, type[1:2,], type = "raw")
predictions <- predict(model, type[1:2,])
table(predictions)
predictions <- predict(model, type)
table(predictions)
model <- naiveBayes(type$X.311_Service_Requests_from_2010_to_Present..Borough ~ ., data = type)
predictions <- predict(model, type)
table(predictions)
?function
condprobtable = prob.table
?function
?function
condprobtable = prob.table(table(type$X.311_Service_Requests_from_2010_to_Present..Complaint.Type, type$X.311_Service_Requests_from_2010_to_Present..Borough))
condprobtable = prop.table(table(type$X.311_Service_Requests_from_2010_to_Present..Complaint.Type, type$X.311_Service_Requests_from_2010_to_Present..Borough))
condprobtable
sort(condprobtable, decreasing = T)
sum(condprobtable)
counttable = table(type$X.311_Service_Requests_from_2010_to_Present..Complaint.Type, type$X.311_Service_Requests_from_2010_to_Present..Borough)
sort(counttable, decreasing = T)
View(type)
View(type)
sort(type[1,], decreasing = T)
sort(type[,1], decreasing = T)
type <- type[which(type$X.311_Service_Requests_from_2010_to_Present..Complaint.Type > 0)]
View(type)
library(dplyr)
install.packages("dplyr")
library(dplyr)
type = data.frame(`311_Service_Requests_from_2010_to_Present`$Complaint.Type, `311_Service_Requests_from_2010_to_Present`$Borough)
by_bur <- group_by(type, type$X.311_Service_Requests_from_2010_to_Present..Borough)
?"table"
names(type) < c("Complaint.Type", "Borough")
names(type) <- c("Complaint.Type", "Borough")
library(data.table)
counttable = table(type$Complaint.Type, type$Borough)
type <- data.table(type)
setkey(type, type$Borough)
setkey(type, Borough)
summarise(type)
View(type)
View(type)
counttable <- as.data.frame(table(type$Complaint.Type, type$Borough))
View(counttable)
View(counttable)
counttable <- data.table(counttable)
setkey(counttable, Borough)
setkey(counttable, var2)
setkey(counttable, Var2)
names(counttable) <- c("Complaint.Type", "Borough", "Freq")
setnames(counttable, c("Var1, Var2, Freq"),c("Complaint.Type", "Borough", "Freq")
setnames(counttable, c("Var1, Var2, Freq"), c("Complaint.Type", "Borough", "Freq"))
setnames(counttable, c("Var1, Var2, Freq"), c("Complaint.Type", "Borough", "Freq"))
setnames(counttable, c("Var1", "Var2", "Freq"), c("Complaint.Type", "Borough", "Freq"))
type_bur <- as.data.frame(countable[, j=list(totalcomplaint = sum(Freq)), by = list(Var2, Var1)])
type_bur <- as.data.frame(counttable[, j=list(totalcomplaint = sum(Freq)), by = list(Var2, Var1)])
counttable <- data.table(counttable)
setkey(counttable, Var2)
View(counttable)
counttable <- as.data.frame(table(type$Complaint.Type, type$Borough))
counttable <- data.table(counttable)
setkey(counttable, Var2)
type_bur <- as.data.frame(counttable[, j=list(totalcomplaint = sum(Freq)), by = list(Var2, Var1)])
View(type_bur)
summary(type_bur)
X <- counttable[, list(SUM=sum(Freq)), by=key(counttable)]
R3 <- counttable[X, list(Var1, Var2, Share=Freq/SUM)]
View(X)
View(R3)
summary(R3)
sum(R3[which(Var2 == "BRONX")$Share,]
sum(R3[which(Var2 == "BRONX")$Share,])
sum(R3[which(Var2 == "BRONX")$Share,])
sum(R3$Share[which(Var2 == "BRONX"),])
sum(R3$Share[which(R3$Var2 == "BRONX"),])
sum(R3$Share[which(R3$Var2 == "BRONX")])
sum(R3$Share)
sum(counttable$Freq)
Y <- counttable[, list(UCP=Freq/sum(Freq))]
View(Y)
Z <- R3[, list(Surprise=R3$Share/Y)]
View(Z)
View(Z)
Z <- counttable[, list(Surprise=R3$Share/Y)]
View(Z)
View(Z)
Z <- counttable[R3, list(Var1, Var2, Share, Surprise=R3$Share/Y)]
Z <- R3[R3, list(Var1, Var2, Share, Surprise=R3$Share/Y)]
Y <- counttable[, list(UCP=Freq/sum(Freq)), by=key(counttable)]
R3 <- counttable[X, list(Var1, Var2, Share=Freq/SUM, Surprise=Share/Y)]
Z <- counttable[Y, list(Var1, Var2, Share, Surprise=R3$Share/Y)]
Z <- counttable[Y, list(Var1, Var2, Share, Surprise=Share/Y)]
R3 <- counttable[X, list(Var1, Var2, Share=Freq/SUM]
R3 <- counttable[X, list(Var1, Var2, Share=Freq/SUM)]
Y <- counttable[, list(UCP=Freq/sum(Freq)), by=key(counttable)]
View(Y)
View(X)
Z <- counttable[, list(Var1, Var2, Share, Surprise=Share/Y)]
Z <- R3[, list(Var1, Var2, Share, Surprise=Share/Y)]
Z <- R3[, list(Var1, Var2, Share, Surprise=Share/UCP)]
Z <- R3[Y, list(Var1, Var2, Share, Surprise=Share/UCP)]
Z <- R3[, list(Var1, Var2, Share, Surprise=Share/Y$UCP)]
View(Z)
View(Z)
sum(Y$UCP)
Y <- counttable[, list(UCP=Freq/sum(Freq))]
sum(Y$UCP)
Z <- R3[, list(Var1, Var2, Share, Surprise=Share/Y$UCP)]
View(Z)
View(Z)
Z[order(Surprise)]
head(Z)
View(Z)
View(Z)
R3 <- counttable[X, list(Var1, Var2, CP=Freq/SUM)]
Z <- R3[, list(Var1, Var2, Share, Surprise=R3$CP/Y$UCP)]
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP/Y$UCP)]
Z[order(Surprise)]
setorder(Z, -Surprise)
head(Z)
setorder(Z, -Surprise, na.last = FALSE)
head(Z)
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
sum(Y$UCP)
Y <- counttable[, list(UCP=Freq/114349]
Y <- counttable[, list(UCP=Freq/114349)]
sum(Y$UCP)
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP/Y$UCP)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
View(type)
type$Borough[which(type$Borough== "")] <- "Unspecified"
View(type)
counttable <- as.data.frame(table(type$Complaint.Type, type$Borough))
counttable <- data.table(counttable)
setkey(counttable, Var2)
X <- counttable[, list(SUM=sum(Freq)), by=key(counttable)]
R3 <- counttable[X, list(Var1, Var2, CP=Freq/SUM)]
Y <- counttable[, list(UCP=Freq/114349)]
sum(Y$UCP)
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP/Y$UCP)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
type <- type[type$Borough != "Unspecified",]
View(type)
counttable <- as.data.frame(table(type$Complaint.Type, type$Borough))
counttable <- data.table(counttable)
setkey(counttable, Var2)
X <- counttable[, list(SUM=sum(Freq)), by=key(counttable)]
R3 <- counttable[X, list(Var1, Var2, CP=Freq/SUM)]
Y <- counttable[, list(UCP=Freq/114349)]
sum(Y$UCP)
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP/Y$UCP)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
sum(R3$Share[which(R3$Var2 == "BRONX")])
sum(R3$Share)
sum(R3$CP)
sum(R3$CP[which(R3$Var2 == "BRONX")])
sum(R3$CP)
Y <- counttable[, list(UCP=Freq/sum(Freq))]
sum(Y$UCP)
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP/Y$UCP)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
Z <- R3[, list(Var1, Var2, Freq, CP, Surprise=R3$CP/Y$UCP)]
Z <- R3[, list(Var1, Var2, counttable$Freq, CP, Surprise=R3$CP/Y$UCP)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
Y <- as.data.frame(prop.table(counttable$Freq))
View(Y)
View(Y)
sum(Y)
Z <- R3[, list(Var1, Var2, counttable$Freq, CP, Surprise=R3$CP/Y)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
Z <- R3[, list(Var1, Var2, counttable$Freq, CP, Surprise=R3$CP/Y$`prop.table(counttable$Freq)`)]
setorder(Z, -Surprise, na.last = TRUE)
head(Z)
Y <- as.data.frame(prop.table(table(type$Complaint.Type)))
View(Y)
setkey(Y, Var1)
Y <- data.table(Y)
setkey(Y, Var1)
sum(Y)
sum(Y$Freq)
Z <- R3[, list(Var1, Var2, counttable$Freq, CP, Surprise=R3$CP/Y$Var1)]
View(R3)
setkey(R3, Var1)
Z <- R3[, list(Var1, Var2, counttable$Freq, CP, Surprise=R3$CP/Y$Var1)]
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP/Y$Var1)]
Z <- R3[, list(Var1, Var2, CP, Surprise=R3$CP / Y$Var1)]
Z <- R3[, list(Var1, Var2, CP, Surprise= R3$CP / Y$Var1)]
View(Z)
sum(R3$CP)
R3 <- counttable[X, list(Var1, Var2, CP=Freq/SUM)]
sum(R3$CP)
X <- counttable[, list(SUM=sum(Freq)), by=key(counttable)]
R3 <- counttable[X, list(Var1, Var2, CP=Freq/SUM)]
sum(R3$CP)
counttable <- as.data.frame(table(type$Complaint.Type, type$Borough))
counttable <- data.table(counttable)
setkey(counttable, Var2)
X <- counttable[, list(SUM=sum(Freq)), by=key(counttable)]
R3 <- counttable[X, list(Var1, Var2, CP=Freq/SUM)]
sum(R3$CP)
?sum
sum(R3$CP, na.rm = TRUE)
sum(R3$CP[which(R3$Var2 == "BRONX")], na.rm = T)
Z <- R3[, list(Var1, Var2, CP, Surprise= R3$CP / Y$Var1), by=key(Y)]
Z <- R3[, list(Var1, Var2, CP, Surprise= R3$CP / Y$Var1)]
sum(Y$Freq)
sum(R3$CP, na.rm = TRUE)
sum(R3$CP[which(R3$Var2 == "BRONX")], na.rm = T)
Z <- R3[Y, nomatch=0]
View(Z)
setkey(Y, Var1)
setkey(R3, Var1)
Z <- merge(R3, Y, all.x = TRUE)
View(Z)
Z <- Z[, list(Var1, Var2, CP, Freq, Surprise= CP / Freq)]
quantile(`311_Service_Requests_from_2010_to_Present`$latitude, probs = c(.1, .9))
?quantile
quantile(`311_Service_Requests_from_2010_to_Present`$latitude, probs = c(.1, .9), na.rm = T)
latitude <- `311_Service_Requests_from_2010_to_Present`$latitude
latitude <- `311_Service_Requests_from_2010_to_Present`$Latitude
quantile(latitude, probs = c(.1, .9), na.rm = T)
range(quantile(latitude, probs = c(.1, .9), na.rm = T))
q <- quantile(latitude, probs = c(.1, .9), na.rm = T)
range(q)
summary(q)
q[1]-q[2]
q[2]-q[1]
summary(`311_Service_Requests_from_2010_to_Present`$Longitude)
summary(latitude)
longi <- summary(`311_Service_Requests_from_2010_to_Present`$Longitude)
lati <- summary(latitude)
longitude <- (`311_Service_Requests_from_2010_to_Present`$Longitude)
center = [mean(longitude), mean(latitude)]
cen = [mean(longitude), mean(latitude)]
cen = (mean(longitude), mean(latitude))
(mean(longitude), mean(latitude))
print(mean(longitude), mean(latitude))
?mean
print(mean(longitude, na.rm = T), mean(latitude, na.rm = T))
mean(latitude, na.rm = T))
mean(latitude, na.rm = T)
mean(longitude, na.rm = T)
ellipse = pi * SD(latitude) *SD(longitude)
squaredegree = 12365.1613 # square kilometers
ellipsearea = pi * sd(latitude) * sd(longitude) * squaredegree
ellipsearea
pi
sd(latitude)
longi <- summary(longitude)
lati <- summary(latitude)
lati
ellipsearea = pi * sd(latitude, na.rm = T) * sd(longitude, na.rm = T) * squaredegree
ellipsearea
datetime <- `311_Service_Requests_from_2010_to_Present`$Created.Date
library(chron)
dtparts = t(as.data.frame(strsplit(datetime,' ')))
dtparts = as.data.frame(as.Date(datetime, format='%m/%d/%Y')
dtparts = as.data.frame(as.Date(datetime, format='%m/%d/%Y'))
View(dtparts)
datetime <- as.data.frame(`311_Service_Requests_from_2010_to_Present`$Created.Date)
?as.list.Date
?chron
dtparts = as.data.frame(as.Date(as.str(datetime), format=' '))
dtparts = as.data.frame(as.Date(datetime, format=' '))
dtparts = as.data.frame(datetime, format=' '))
dtparts = as.data.frame(datetime, format=' ')
?str
library(datetime)
install.packages("datetime")
?strptime
strptime(as.character(datetime), "%m/%d/%Y %I:%M:%S %p")
View(datetime)
View(datetime)
names(datetime) <- c("string")
as.character(datatime$string)
as.character(datetime$string)
strptime(as.character(datetime), "%m/%d/%Y %I:%M:%S %p")
strptime(as.character(datetime$string), "%m/%d/%Y %I:%M:%S %p")
dtparts <- strptime(as.character(datetime$string), "%m/%d/%Y %I:%M:%S %p")
dtparts <- as.data.frame(strptime(as.character(datetime$string), "%m/%d/%Y %I:%M:%S %p"))
View(dtparts)
summary(dtparts)
?as.data.frame
names(dtparts) <- c(conv)
names(dtparts) <- c("conv")
?times
hours = times(strftime(dtparts$conv, format="%T"))
hours <- as.data.table(hours)
hours <- as.data.frame(hours)
?hours
View(hours)
View(hours)
hours$numb <- hours(hours$hours)
htable <- table(hours$numb)
phtable <- prop.table(htable)
summary htable
summary(htable)
head(htable)
head(sort(htable, decreasing = true)
phtable
head(sort(htable, decreasing = true))
head(sort(htable, decreasing = True))
head(sort(htable, decreasing = T))
phtable
sort(phtable, decreasing = T)
sort(htable, decreasing = T)
htable[11]-htable[4]
8802-818
htable[12]-htable[5]
?diff
timediff <- as.numeric(diff(dtparts$conv))
sd(timediff)
Code_Worker_Quest <- read.csv("~/herokufolder/flask tutorial/flask-demo/static/Code_Worker_Quest.csv")
View(Code_Worker_Quest)
pygal_world <- read.csv("~/Documents/Data/pygal_world.csv")
View(pygal_world)
Code_Worker_Quest <- as.data.table(Code_Worker_Quest)
library(data.table)
Code_Worker_Quest <- as.data.table(Code_Worker_Quest)
pygal_world <- as.data.table(pygal_world)
setnames(pygal_world, "Country", "Country.Name")
full_comb <- merge(Code_Worker_Quest, pygal_world, by = "Country.Name", all = T)
View(full_comb)
View(full_comb)
setnames(pygal_world, "code", "pygal_code")
full_comb <- merge(Code_Worker_Quest, pygal_world, by = "Country.Name", all = T)
View(full_comb)
pygal_world <- read.csv("~/Documents/Data/pygal_world.csv")
View(pygal_world)
Code_Worker_Quest <- read.csv("~/herokufolder/flask tutorial/flask-demo/static/Code_Worker_Quest.csv")
View(Code_Worker_Quest)
Code_Worker_Quest <- Code_Worker_Quest[2:]
Code_Worker_Quest <- Code_Worker_Quest[2:,]
Code_Worker_Quest <- Code_Worker_Quest[,2:25]
Code_Worker_Quest <- Code_Worker_Quest[,2:24]
Code_Worker_Quest <- as.data.table(Code_Worker_Quest)
pygal_world <- as.data.table(pygal_world)
setnames(pygal_world, "Country", "Country.Name")
setnames(pygal_world, "code", "pygal_code")
full_comb <- merge(Code_Worker_Quest, pygal_world, by = "Country.Name", all = T)
View(full_comb)
full_comb <- merge(Code_Worker_Quest, pygal_world, by = "Country.Name", all.x = T)
write.csv(total, "Code_Worker_Quest.csv", row.names=FALSE, na="")
write.csv(Code_Worker_Quest, "Code_Worker_Quest.csv", row.names=FALSE, na="")
setwd("~/herokufolder/flask tutorial/flask-demo/data_challenge")
write.csv(Code_Worker_Quest, "Code_Worker_Quest.csv", row.names=FALSE, na="")
write.csv(full_comb, "Code_Worker_Quest.csv", row.names=FALSE, na="")
